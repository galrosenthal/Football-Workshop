/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.Fwdb;
import DB.Tables.Keys;
import DB.Tables.tables.records.RefereeInGameRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefereeInGame extends TableImpl<RefereeInGameRecord> {

    private static final long serialVersionUID = -762026544;

    /**
     * The reference instance of <code>fwdb.referee_in_game</code>
     */
    public static final RefereeInGame REFEREE_IN_GAME = new RefereeInGame();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefereeInGameRecord> getRecordType() {
        return RefereeInGameRecord.class;
    }

    /**
     * The column <code>fwdb.referee_in_game.username</code>.
     */
    public final TableField<RefereeInGameRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.referee_in_game.game_id</code>.
     */
    public final TableField<RefereeInGameRecord, Integer> GAME_ID = createField(DSL.name("game_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>fwdb.referee_in_game</code> table reference
     */
    public RefereeInGame() {
        this(DSL.name("referee_in_game"), null);
    }

    /**
     * Create an aliased <code>fwdb.referee_in_game</code> table reference
     */
    public RefereeInGame(String alias) {
        this(DSL.name(alias), REFEREE_IN_GAME);
    }

    /**
     * Create an aliased <code>fwdb.referee_in_game</code> table reference
     */
    public RefereeInGame(Name alias) {
        this(alias, REFEREE_IN_GAME);
    }

    private RefereeInGame(Name alias, Table<RefereeInGameRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefereeInGame(Name alias, Table<RefereeInGameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RefereeInGame(Table<O> child, ForeignKey<O, RefereeInGameRecord> key) {
        super(child, key, REFEREE_IN_GAME);
    }

    @Override
    public Schema getSchema() {
        return Fwdb.FWDB;
    }

    @Override
    public UniqueKey<RefereeInGameRecord> getPrimaryKey() {
        return Keys.KEY_REFEREE_IN_GAME_PRIMARY;
    }

    @Override
    public List<UniqueKey<RefereeInGameRecord>> getKeys() {
        return Arrays.<UniqueKey<RefereeInGameRecord>>asList(Keys.KEY_REFEREE_IN_GAME_PRIMARY);
    }

    @Override
    public List<ForeignKey<RefereeInGameRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefereeInGameRecord, ?>>asList(Keys.FK__REFEREE, Keys.FK_REFEREE_IN_GAME_GAME);
    }

    public Referee referee() {
        return new Referee(this, Keys.FK__REFEREE);
    }

    public Game game() {
        return new Game(this, Keys.FK_REFEREE_IN_GAME_GAME);
    }

    @Override
    public RefereeInGame as(String alias) {
        return new RefereeInGame(DSL.name(alias), this);
    }

    @Override
    public RefereeInGame as(Name alias) {
        return new RefereeInGame(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefereeInGame rename(String name) {
        return new RefereeInGame(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefereeInGame rename(Name name) {
        return new RefereeInGame(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
