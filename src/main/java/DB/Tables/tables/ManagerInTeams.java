/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.Fwdb;
import DB.Tables.Keys;
import DB.Tables.tables.records.ManagerInTeamsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ManagerInTeams extends TableImpl<ManagerInTeamsRecord> {

    private static final long serialVersionUID = -115744800;

    /**
     * The reference instance of <code>fwdb.manager_in_teams</code>
     */
    public static final ManagerInTeams MANAGER_IN_TEAMS = new ManagerInTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManagerInTeamsRecord> getRecordType() {
        return ManagerInTeamsRecord.class;
    }

    /**
     * The column <code>fwdb.manager_in_teams.username</code>.
     */
    public final TableField<ManagerInTeamsRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.team_name</code>.
     */
    public final TableField<ManagerInTeamsRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.appointer</code>.
     */
    public final TableField<ManagerInTeamsRecord, String> APPOINTER = createField(DSL.name("appointer"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("'\"\"'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.REMOVE_PLAYER</code>.
     */
    public final TableField<ManagerInTeamsRecord, Boolean> REMOVE_PLAYER = createField(DSL.name("REMOVE_PLAYER"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.ADD_PLAYER</code>.
     */
    public final TableField<ManagerInTeamsRecord, Boolean> ADD_PLAYER = createField(DSL.name("ADD_PLAYER"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.CHANGE_POSITION_PLAYER</code>.
     */
    public final TableField<ManagerInTeamsRecord, Boolean> CHANGE_POSITION_PLAYER = createField(DSL.name("CHANGE_POSITION_PLAYER"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.REMOVE_COACH</code>.
     */
    public final TableField<ManagerInTeamsRecord, Boolean> REMOVE_COACH = createField(DSL.name("REMOVE_COACH"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.ADD_COACH</code>.
     */
    public final TableField<ManagerInTeamsRecord, Boolean> ADD_COACH = createField(DSL.name("ADD_COACH"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>fwdb.manager_in_teams.CHANGE_TEAM_JOB_COACH</code>.
     */
    public final TableField<ManagerInTeamsRecord, Boolean> CHANGE_TEAM_JOB_COACH = createField(DSL.name("CHANGE_TEAM_JOB_COACH"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>fwdb.manager_in_teams</code> table reference
     */
    public ManagerInTeams() {
        this(DSL.name("manager_in_teams"), null);
    }

    /**
     * Create an aliased <code>fwdb.manager_in_teams</code> table reference
     */
    public ManagerInTeams(String alias) {
        this(DSL.name(alias), MANAGER_IN_TEAMS);
    }

    /**
     * Create an aliased <code>fwdb.manager_in_teams</code> table reference
     */
    public ManagerInTeams(Name alias) {
        this(alias, MANAGER_IN_TEAMS);
    }

    private ManagerInTeams(Name alias, Table<ManagerInTeamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ManagerInTeams(Name alias, Table<ManagerInTeamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ManagerInTeams(Table<O> child, ForeignKey<O, ManagerInTeamsRecord> key) {
        super(child, key, MANAGER_IN_TEAMS);
    }

    @Override
    public Schema getSchema() {
        return Fwdb.FWDB;
    }

    @Override
    public UniqueKey<ManagerInTeamsRecord> getPrimaryKey() {
        return Keys.KEY_MANAGER_IN_TEAMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ManagerInTeamsRecord>> getKeys() {
        return Arrays.<UniqueKey<ManagerInTeamsRecord>>asList(Keys.KEY_MANAGER_IN_TEAMS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ManagerInTeamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ManagerInTeamsRecord, ?>>asList(Keys.FK_MANAGED_TEAMS_TEAM_MANAGER, Keys.FK_MANAGED_TEAMS_TEAM, Keys.FK_MANAGER_IN_TEAMS_SYSTEMUSER);
    }

    public TeamManager teamManager() {
        return new TeamManager(this, Keys.FK_MANAGED_TEAMS_TEAM_MANAGER);
    }

    public Team team() {
        return new Team(this, Keys.FK_MANAGED_TEAMS_TEAM);
    }

    public Systemuser systemuser() {
        return new Systemuser(this, Keys.FK_MANAGER_IN_TEAMS_SYSTEMUSER);
    }

    @Override
    public ManagerInTeams as(String alias) {
        return new ManagerInTeams(DSL.name(alias), this);
    }

    @Override
    public ManagerInTeams as(Name alias) {
        return new ManagerInTeams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ManagerInTeams rename(String name) {
        return new ManagerInTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManagerInTeams rename(Name name) {
        return new ManagerInTeams(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
