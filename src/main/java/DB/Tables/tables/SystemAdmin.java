/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.Fwdb;
import DB.Tables.Keys;
import DB.Tables.tables.records.SystemAdminRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemAdmin extends TableImpl<SystemAdminRecord> {

    private static final long serialVersionUID = -694662091;

    /**
     * The reference instance of <code>fwdb.system_admin</code>
     */
    public static final SystemAdmin SYSTEM_ADMIN = new SystemAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SystemAdminRecord> getRecordType() {
        return SystemAdminRecord.class;
    }

    /**
     * The column <code>fwdb.system_admin.username</code>.
     */
    public final TableField<SystemAdminRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>fwdb.system_admin</code> table reference
     */
    public SystemAdmin() {
        this(DSL.name("system_admin"), null);
    }

    /**
     * Create an aliased <code>fwdb.system_admin</code> table reference
     */
    public SystemAdmin(String alias) {
        this(DSL.name(alias), SYSTEM_ADMIN);
    }

    /**
     * Create an aliased <code>fwdb.system_admin</code> table reference
     */
    public SystemAdmin(Name alias) {
        this(alias, SYSTEM_ADMIN);
    }

    private SystemAdmin(Name alias, Table<SystemAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private SystemAdmin(Name alias, Table<SystemAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SystemAdmin(Table<O> child, ForeignKey<O, SystemAdminRecord> key) {
        super(child, key, SYSTEM_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return Fwdb.FWDB;
    }

    @Override
    public UniqueKey<SystemAdminRecord> getPrimaryKey() {
        return Keys.KEY_SYSTEM_ADMIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<SystemAdminRecord>> getKeys() {
        return Arrays.<UniqueKey<SystemAdminRecord>>asList(Keys.KEY_SYSTEM_ADMIN_PRIMARY);
    }

    @Override
    public List<ForeignKey<SystemAdminRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SystemAdminRecord, ?>>asList(Keys.FK__USER_ROLES_SYSTEM_ADMIN);
    }

    public UserRoles userRoles() {
        return new UserRoles(this, Keys.FK__USER_ROLES_SYSTEM_ADMIN);
    }

    @Override
    public SystemAdmin as(String alias) {
        return new SystemAdmin(DSL.name(alias), this);
    }

    @Override
    public SystemAdmin as(Name alias) {
        return new SystemAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemAdmin rename(String name) {
        return new SystemAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SystemAdmin rename(Name name) {
        return new SystemAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
