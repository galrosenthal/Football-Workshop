/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.Fwdb;
import DB.Tables.Keys;
import DB.Tables.tables.records.GamesInSeasonRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GamesInSeason extends TableImpl<GamesInSeasonRecord> {

    private static final long serialVersionUID = 798692355;

    /**
     * The reference instance of <code>fwdb.games_in_season</code>
     */
    public static final GamesInSeason GAMES_IN_SEASON = new GamesInSeason();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GamesInSeasonRecord> getRecordType() {
        return GamesInSeasonRecord.class;
    }

    /**
     * The column <code>fwdb.games_in_season.season_id</code>.
     */
    public final TableField<GamesInSeasonRecord, Integer> SEASON_ID = createField(DSL.name("season_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fwdb.games_in_season.game_id</code>.
     */
    public final TableField<GamesInSeasonRecord, Integer> GAME_ID = createField(DSL.name("game_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>fwdb.games_in_season</code> table reference
     */
    public GamesInSeason() {
        this(DSL.name("games_in_season"), null);
    }

    /**
     * Create an aliased <code>fwdb.games_in_season</code> table reference
     */
    public GamesInSeason(String alias) {
        this(DSL.name(alias), GAMES_IN_SEASON);
    }

    /**
     * Create an aliased <code>fwdb.games_in_season</code> table reference
     */
    public GamesInSeason(Name alias) {
        this(alias, GAMES_IN_SEASON);
    }

    private GamesInSeason(Name alias, Table<GamesInSeasonRecord> aliased) {
        this(alias, aliased, null);
    }

    private GamesInSeason(Name alias, Table<GamesInSeasonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GamesInSeason(Table<O> child, ForeignKey<O, GamesInSeasonRecord> key) {
        super(child, key, GAMES_IN_SEASON);
    }

    @Override
    public Schema getSchema() {
        return Fwdb.FWDB;
    }

    @Override
    public UniqueKey<GamesInSeasonRecord> getPrimaryKey() {
        return Keys.KEY_GAMES_IN_SEASON_PRIMARY;
    }

    @Override
    public List<UniqueKey<GamesInSeasonRecord>> getKeys() {
        return Arrays.<UniqueKey<GamesInSeasonRecord>>asList(Keys.KEY_GAMES_IN_SEASON_PRIMARY);
    }

    @Override
    public List<ForeignKey<GamesInSeasonRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GamesInSeasonRecord, ?>>asList(Keys.FK_GAMES_IN_SEASON_SEASON, Keys.FK_GAMES_IN_SEASON_GAME);
    }

    public Season season() {
        return new Season(this, Keys.FK_GAMES_IN_SEASON_SEASON);
    }

    public Game game() {
        return new Game(this, Keys.FK_GAMES_IN_SEASON_GAME);
    }

    @Override
    public GamesInSeason as(String alias) {
        return new GamesInSeason(DSL.name(alias), this);
    }

    @Override
    public GamesInSeason as(Name alias) {
        return new GamesInSeason(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GamesInSeason rename(String name) {
        return new GamesInSeason(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GamesInSeason rename(Name name) {
        return new GamesInSeason(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
