/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.Fwdb;
import DB.Tables.Keys;
import DB.Tables.tables.records.AlertRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Alert extends TableImpl<AlertRecord> {

    private static final long serialVersionUID = -288227327;

    /**
     * The reference instance of <code>fwdb.alert</code>
     */
    public static final Alert ALERT = new Alert();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlertRecord> getRecordType() {
        return AlertRecord.class;
    }

    /**
     * The column <code>fwdb.alert.alert_id</code>.
     */
    public final TableField<AlertRecord, Integer> ALERT_ID = createField(DSL.name("alert_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fwdb.alert.username</code>.
     */
    public final TableField<AlertRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.alert.notification</code>.
     */
    public final TableField<AlertRecord, String> NOTIFICATION = createField(DSL.name("notification"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>fwdb.alert</code> table reference
     */
    public Alert() {
        this(DSL.name("alert"), null);
    }

    /**
     * Create an aliased <code>fwdb.alert</code> table reference
     */
    public Alert(String alias) {
        this(DSL.name(alias), ALERT);
    }

    /**
     * Create an aliased <code>fwdb.alert</code> table reference
     */
    public Alert(Name alias) {
        this(alias, ALERT);
    }

    private Alert(Name alias, Table<AlertRecord> aliased) {
        this(alias, aliased, null);
    }

    private Alert(Name alias, Table<AlertRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Alert(Table<O> child, ForeignKey<O, AlertRecord> key) {
        super(child, key, ALERT);
    }

    @Override
    public Schema getSchema() {
        return Fwdb.FWDB;
    }

    @Override
    public Identity<AlertRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ALERT;
    }

    @Override
    public UniqueKey<AlertRecord> getPrimaryKey() {
        return Keys.KEY_ALERT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AlertRecord>> getKeys() {
        return Arrays.<UniqueKey<AlertRecord>>asList(Keys.KEY_ALERT_PRIMARY);
    }

    @Override
    public List<ForeignKey<AlertRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AlertRecord, ?>>asList(Keys.FK_ALERT_SYSTEMUSER);
    }

    public Systemuser systemuser() {
        return new Systemuser(this, Keys.FK_ALERT_SYSTEMUSER);
    }

    @Override
    public Alert as(String alias) {
        return new Alert(DSL.name(alias), this);
    }

    @Override
    public Alert as(Name alias) {
        return new Alert(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Alert rename(String name) {
        return new Alert(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Alert rename(Name name) {
        return new Alert(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
