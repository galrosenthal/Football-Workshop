/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables.records;


import DB.Tables.enums.TeamStatus;
import DB.Tables.tables.Team;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamRecord extends UpdatableRecordImpl<TeamRecord> implements Record2<String, TeamStatus> {

    private static final long serialVersionUID = -1393276515;

    /**
     * Setter for <code>fwdb.team.name</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>fwdb.team.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>fwdb.team.status</code>.
     */
    public void setStatus(TeamStatus value) {
        set(1, value);
    }

    /**
     * Getter for <code>fwdb.team.status</code>.
     */
    public TeamStatus getStatus() {
        return (TeamStatus) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, TeamStatus> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, TeamStatus> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Team.TEAM.NAME;
    }

    @Override
    public Field<TeamStatus> field2() {
        return Team.TEAM.STATUS;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public TeamStatus component2() {
        return getStatus();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public TeamStatus value2() {
        return getStatus();
    }

    @Override
    public TeamRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public TeamRecord value2(TeamStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public TeamRecord values(String value1, TeamStatus value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeamRecord
     */
    public TeamRecord() {
        super(Team.TEAM);
    }

    /**
     * Create a detached, initialised TeamRecord
     */
    public TeamRecord(String name, TeamStatus status) {
        super(Team.TEAM);

        set(0, name);
        set(1, status);
    }
}
