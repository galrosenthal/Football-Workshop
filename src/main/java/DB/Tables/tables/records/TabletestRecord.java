/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables.records;


import DB.Tables.tables.Tabletest;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TabletestRecord extends UpdatableRecordImpl<TabletestRecord> implements Record3<Integer, String, LocalDate> {

    private static final long serialVersionUID = 478242033;

    /**
     * Setter for <code>testdb.tabletest.A</code>.
     */
    public void setA(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>testdb.tabletest.A</code>.
     */
    public Integer getA() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>testdb.tabletest.B</code>.
     */
    public void setB(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>testdb.tabletest.B</code>.
     */
    public String getB() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testdb.tabletest.C</code>.
     */
    public void setC(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>testdb.tabletest.C</code>.
     */
    public LocalDate getC() {
        return (LocalDate) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, LocalDate> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Tabletest.TABLETEST.A;
    }

    @Override
    public Field<String> field2() {
        return Tabletest.TABLETEST.B;
    }

    @Override
    public Field<LocalDate> field3() {
        return Tabletest.TABLETEST.C;
    }

    @Override
    public Integer component1() {
        return getA();
    }

    @Override
    public String component2() {
        return getB();
    }

    @Override
    public LocalDate component3() {
        return getC();
    }

    @Override
    public Integer value1() {
        return getA();
    }

    @Override
    public String value2() {
        return getB();
    }

    @Override
    public LocalDate value3() {
        return getC();
    }

    @Override
    public TabletestRecord value1(Integer value) {
        setA(value);
        return this;
    }

    @Override
    public TabletestRecord value2(String value) {
        setB(value);
        return this;
    }

    @Override
    public TabletestRecord value3(LocalDate value) {
        setC(value);
        return this;
    }

    @Override
    public TabletestRecord values(Integer value1, String value2, LocalDate value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TabletestRecord
     */
    public TabletestRecord() {
        super(Tabletest.TABLETEST);
    }

    /**
     * Create a detached, initialised TabletestRecord
     */
    public TabletestRecord(Integer a, String b, LocalDate c) {
        super(Tabletest.TABLETEST);

        set(0, a);
        set(1, b);
        set(2, c);
    }
}
