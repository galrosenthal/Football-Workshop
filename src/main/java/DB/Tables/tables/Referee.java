/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.Fwdb;
import DB.Tables.Keys;
import DB.Tables.enums.RefereeTraining;
import DB.Tables.tables.records.RefereeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Referee extends TableImpl<RefereeRecord> {

    private static final long serialVersionUID = 151788307;

    /**
     * The reference instance of <code>fwdb.referee</code>
     */
    public static final Referee REFEREE = new Referee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefereeRecord> getRecordType() {
        return RefereeRecord.class;
    }

    /**
     * The column <code>fwdb.referee.username</code>.
     */
    public final TableField<RefereeRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.referee.training</code>.
     */
    public final TableField<RefereeRecord, RefereeTraining> TRAINING = createField(DSL.name("training"), org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false).asEnumDataType(DB.Tables.enums.RefereeTraining.class), this, "");

    /**
     * Create a <code>fwdb.referee</code> table reference
     */
    public Referee() {
        this(DSL.name("referee"), null);
    }

    /**
     * Create an aliased <code>fwdb.referee</code> table reference
     */
    public Referee(String alias) {
        this(DSL.name(alias), REFEREE);
    }

    /**
     * Create an aliased <code>fwdb.referee</code> table reference
     */
    public Referee(Name alias) {
        this(alias, REFEREE);
    }

    private Referee(Name alias, Table<RefereeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Referee(Name alias, Table<RefereeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Referee(Table<O> child, ForeignKey<O, RefereeRecord> key) {
        super(child, key, REFEREE);
    }

    @Override
    public Schema getSchema() {
        return Fwdb.FWDB;
    }

    @Override
    public UniqueKey<RefereeRecord> getPrimaryKey() {
        return Keys.KEY_REFEREE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RefereeRecord>> getKeys() {
        return Arrays.<UniqueKey<RefereeRecord>>asList(Keys.KEY_REFEREE_PRIMARY);
    }

    @Override
    public List<ForeignKey<RefereeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefereeRecord, ?>>asList(Keys.FK_REFREE_USER_ROLES);
    }

    public UserRoles userRoles() {
        return new UserRoles(this, Keys.FK_REFREE_USER_ROLES);
    }

    @Override
    public Referee as(String alias) {
        return new Referee(DSL.name(alias), this);
    }

    @Override
    public Referee as(Name alias) {
        return new Referee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Referee rename(String name) {
        return new Referee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Referee rename(Name name) {
        return new Referee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, RefereeTraining> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
