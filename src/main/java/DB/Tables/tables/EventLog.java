/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.Fwdb;
import DB.Tables.Keys;
import DB.Tables.tables.records.EventLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventLog extends TableImpl<EventLogRecord> {

    private static final long serialVersionUID = 1442968119;

    /**
     * The reference instance of <code>fwdb.event_log</code>
     */
    public static final EventLog EVENT_LOG = new EventLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventLogRecord> getRecordType() {
        return EventLogRecord.class;
    }

    /**
     * The column <code>fwdb.event_log.id</code>.
     */
    public final TableField<EventLogRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fwdb.event_log.date</code>.
     */
    public final TableField<EventLogRecord, LocalDateTime> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>fwdb.event_log.class</code>.
     */
    public final TableField<EventLogRecord, String> CLASS = createField(DSL.name("class"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.event_log.level</code>.
     */
    public final TableField<EventLogRecord, String> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.event_log.username</code>.
     */
    public final TableField<EventLogRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.event_log.action</code>.
     */
    public final TableField<EventLogRecord, String> ACTION = createField(DSL.name("action"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb.event_log.message</code>.
     */
    public final TableField<EventLogRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>fwdb.event_log</code> table reference
     */
    public EventLog() {
        this(DSL.name("event_log"), null);
    }

    /**
     * Create an aliased <code>fwdb.event_log</code> table reference
     */
    public EventLog(String alias) {
        this(DSL.name(alias), EVENT_LOG);
    }

    /**
     * Create an aliased <code>fwdb.event_log</code> table reference
     */
    public EventLog(Name alias) {
        this(alias, EVENT_LOG);
    }

    private EventLog(Name alias, Table<EventLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventLog(Name alias, Table<EventLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventLog(Table<O> child, ForeignKey<O, EventLogRecord> key) {
        super(child, key, EVENT_LOG);
    }

    @Override
    public Schema getSchema() {
        return Fwdb.FWDB;
    }

    @Override
    public Identity<EventLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EVENT_LOG;
    }

    @Override
    public UniqueKey<EventLogRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventLogRecord>> getKeys() {
        return Arrays.<UniqueKey<EventLogRecord>>asList(Keys.KEY_EVENT_LOG_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventLogRecord, ?>>asList(Keys.FK_EVENT_LOG_SYSTEMUSER);
    }

    public Systemuser systemuser() {
        return new Systemuser(this, Keys.FK_EVENT_LOG_SYSTEMUSER);
    }

    @Override
    public EventLog as(String alias) {
        return new EventLog(DSL.name(alias), this);
    }

    @Override
    public EventLog as(Name alias) {
        return new EventLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(String name) {
        return new EventLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventLog rename(Name name) {
        return new EventLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, LocalDateTime, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
