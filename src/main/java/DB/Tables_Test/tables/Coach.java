/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.enums.CoachQualification;
import DB.Tables_Test.tables.records.CoachRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coach extends TableImpl<CoachRecord> {

    private static final long serialVersionUID = -249823233;

    /**
     * The reference instance of <code>fwdb_test.coach</code>
     */
    public static final Coach COACH = new Coach();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoachRecord> getRecordType() {
        return CoachRecord.class;
    }

    /**
     * The column <code>fwdb_test.coach.username</code>.
     */
    public final TableField<CoachRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.coach.qualification</code>.
     */
    public final TableField<CoachRecord, CoachQualification> QUALIFICATION = createField(DSL.name("qualification"), org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false).asEnumDataType(DB.Tables_Test.enums.CoachQualification.class), this, "");

    /**
     * Create a <code>fwdb_test.coach</code> table reference
     */
    public Coach() {
        this(DSL.name("coach"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.coach</code> table reference
     */
    public Coach(String alias) {
        this(DSL.name(alias), COACH);
    }

    /**
     * Create an aliased <code>fwdb_test.coach</code> table reference
     */
    public Coach(Name alias) {
        this(alias, COACH);
    }

    private Coach(Name alias, Table<CoachRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coach(Name alias, Table<CoachRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Coach(Table<O> child, ForeignKey<O, CoachRecord> key) {
        super(child, key, COACH);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<CoachRecord> getPrimaryKey() {
        return Keys.KEY_COACH_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoachRecord>> getKeys() {
        return Arrays.<UniqueKey<CoachRecord>>asList(Keys.KEY_COACH_PRIMARY);
    }

    @Override
    public List<ForeignKey<CoachRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoachRecord, ?>>asList(Keys.FK_COACH_USER_ROLES);
    }

    public UserRoles userRoles() {
        return new UserRoles(this, Keys.FK_COACH_USER_ROLES);
    }

    @Override
    public Coach as(String alias) {
        return new Coach(DSL.name(alias), this);
    }

    @Override
    public Coach as(Name alias) {
        return new Coach(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coach rename(String name) {
        return new Coach(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coach rename(Name name) {
        return new Coach(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, CoachQualification> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
