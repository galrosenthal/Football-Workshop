/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.EventSwitchPlayersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventSwitchPlayers extends TableImpl<EventSwitchPlayersRecord> {

    private static final long serialVersionUID = -1552259232;

    /**
     * The reference instance of <code>fwdb_test.event_switch_players</code>
     */
    public static final EventSwitchPlayers EVENT_SWITCH_PLAYERS = new EventSwitchPlayers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventSwitchPlayersRecord> getRecordType() {
        return EventSwitchPlayersRecord.class;
    }

    /**
     * The column <code>fwdb_test.event_switch_players.event_id</code>.
     */
    public final TableField<EventSwitchPlayersRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fwdb_test.event_switch_players.game_id</code>.
     */
    public final TableField<EventSwitchPlayersRecord, Integer> GAME_ID = createField(DSL.name("game_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fwdb_test.event_switch_players.team_name</code>.
     */
    public final TableField<EventSwitchPlayersRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.event_switch_players.entering_Player</code>.
     */
    public final TableField<EventSwitchPlayersRecord, String> ENTERING_PLAYER = createField(DSL.name("entering_Player"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fwdb_test.event_switch_players.exiting_Player</code>.
     */
    public final TableField<EventSwitchPlayersRecord, String> EXITING_PLAYER = createField(DSL.name("exiting_Player"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fwdb_test.event_switch_players.minute</code>.
     */
    public final TableField<EventSwitchPlayersRecord, Integer> MINUTE = createField(DSL.name("minute"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.event_switch_players</code> table reference
     */
    public EventSwitchPlayers() {
        this(DSL.name("event_switch_players"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.event_switch_players</code> table reference
     */
    public EventSwitchPlayers(String alias) {
        this(DSL.name(alias), EVENT_SWITCH_PLAYERS);
    }

    /**
     * Create an aliased <code>fwdb_test.event_switch_players</code> table reference
     */
    public EventSwitchPlayers(Name alias) {
        this(alias, EVENT_SWITCH_PLAYERS);
    }

    private EventSwitchPlayers(Name alias, Table<EventSwitchPlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventSwitchPlayers(Name alias, Table<EventSwitchPlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventSwitchPlayers(Table<O> child, ForeignKey<O, EventSwitchPlayersRecord> key) {
        super(child, key, EVENT_SWITCH_PLAYERS);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public Identity<EventSwitchPlayersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EVENT_SWITCH_PLAYERS;
    }

    @Override
    public UniqueKey<EventSwitchPlayersRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_SWITCH_PLAYERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventSwitchPlayersRecord>> getKeys() {
        return Arrays.<UniqueKey<EventSwitchPlayersRecord>>asList(Keys.KEY_EVENT_SWITCH_PLAYERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventSwitchPlayersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventSwitchPlayersRecord, ?>>asList(Keys.FK_EVENT_SWITCH_PLAYERS_GAME, Keys.FK_EVENT_SWITCH_PLAYERS_TEAM, Keys.FK__PLAYER_ENTER, Keys.FK__PLAYER_EXIT);
    }

    public Game game() {
        return new Game(this, Keys.FK_EVENT_SWITCH_PLAYERS_GAME);
    }

    public Team team() {
        return new Team(this, Keys.FK_EVENT_SWITCH_PLAYERS_TEAM);
    }

    public Player fk_PlayerEnter() {
        return new Player(this, Keys.FK__PLAYER_ENTER);
    }

    public Player fk_PlayerExit() {
        return new Player(this, Keys.FK__PLAYER_EXIT);
    }

    @Override
    public EventSwitchPlayers as(String alias) {
        return new EventSwitchPlayers(DSL.name(alias), this);
    }

    @Override
    public EventSwitchPlayers as(Name alias) {
        return new EventSwitchPlayers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSwitchPlayers rename(String name) {
        return new EventSwitchPlayers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSwitchPlayers rename(Name name) {
        return new EventSwitchPlayers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
