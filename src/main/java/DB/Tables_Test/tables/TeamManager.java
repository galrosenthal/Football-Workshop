/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.TeamManagerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamManager extends TableImpl<TeamManagerRecord> {

    private static final long serialVersionUID = -1444142225;

    /**
     * The reference instance of <code>fwdb_test.team_manager</code>
     */
    public static final TeamManager TEAM_MANAGER = new TeamManager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamManagerRecord> getRecordType() {
        return TeamManagerRecord.class;
    }

    /**
     * The column <code>fwdb_test.team_manager.username</code>.
     */
    public final TableField<TeamManagerRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.team_manager.appointer</code>.
     */
    public final TableField<TeamManagerRecord, String> APPOINTER = createField(DSL.name("appointer"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.team_manager</code> table reference
     */
    public TeamManager() {
        this(DSL.name("team_manager"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.team_manager</code> table reference
     */
    public TeamManager(String alias) {
        this(DSL.name(alias), TEAM_MANAGER);
    }

    /**
     * Create an aliased <code>fwdb_test.team_manager</code> table reference
     */
    public TeamManager(Name alias) {
        this(alias, TEAM_MANAGER);
    }

    private TeamManager(Name alias, Table<TeamManagerRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamManager(Name alias, Table<TeamManagerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TeamManager(Table<O> child, ForeignKey<O, TeamManagerRecord> key) {
        super(child, key, TEAM_MANAGER);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<TeamManagerRecord> getPrimaryKey() {
        return Keys.KEY_TEAM_MANAGER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeamManagerRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamManagerRecord>>asList(Keys.KEY_TEAM_MANAGER_PRIMARY);
    }

    @Override
    public List<ForeignKey<TeamManagerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeamManagerRecord, ?>>asList(Keys.FK_TEAM_MANAGER_USER_ROLES, Keys.FK_TEAM_MANAGER_TEAM_OWNER);
    }

    public UserRoles userRoles() {
        return new UserRoles(this, Keys.FK_TEAM_MANAGER_USER_ROLES);
    }

    public TeamOwner teamOwner() {
        return new TeamOwner(this, Keys.FK_TEAM_MANAGER_TEAM_OWNER);
    }

    @Override
    public TeamManager as(String alias) {
        return new TeamManager(DSL.name(alias), this);
    }

    @Override
    public TeamManager as(Name alias) {
        return new TeamManager(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamManager rename(String name) {
        return new TeamManager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamManager rename(Name name) {
        return new TeamManager(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
