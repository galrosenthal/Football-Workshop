/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.StadiumHomeTeamsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StadiumHomeTeams extends TableImpl<StadiumHomeTeamsRecord> {

    private static final long serialVersionUID = -867132439;

    /**
     * The reference instance of <code>fwdb_test.stadium_home_teams</code>
     */
    public static final StadiumHomeTeams STADIUM_HOME_TEAMS = new StadiumHomeTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StadiumHomeTeamsRecord> getRecordType() {
        return StadiumHomeTeamsRecord.class;
    }

    /**
     * The column <code>fwdb_test.stadium_home_teams.stadium_id</code>.
     */
    public final TableField<StadiumHomeTeamsRecord, Integer> STADIUM_ID = createField(DSL.name("stadium_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fwdb_test.stadium_home_teams.team_name</code>.
     */
    public final TableField<StadiumHomeTeamsRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.stadium_home_teams</code> table reference
     */
    public StadiumHomeTeams() {
        this(DSL.name("stadium_home_teams"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.stadium_home_teams</code> table reference
     */
    public StadiumHomeTeams(String alias) {
        this(DSL.name(alias), STADIUM_HOME_TEAMS);
    }

    /**
     * Create an aliased <code>fwdb_test.stadium_home_teams</code> table reference
     */
    public StadiumHomeTeams(Name alias) {
        this(alias, STADIUM_HOME_TEAMS);
    }

    private StadiumHomeTeams(Name alias, Table<StadiumHomeTeamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private StadiumHomeTeams(Name alias, Table<StadiumHomeTeamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> StadiumHomeTeams(Table<O> child, ForeignKey<O, StadiumHomeTeamsRecord> key) {
        super(child, key, STADIUM_HOME_TEAMS);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<StadiumHomeTeamsRecord> getPrimaryKey() {
        return Keys.KEY_STADIUM_HOME_TEAMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<StadiumHomeTeamsRecord>> getKeys() {
        return Arrays.<UniqueKey<StadiumHomeTeamsRecord>>asList(Keys.KEY_STADIUM_HOME_TEAMS_PRIMARY);
    }

    @Override
    public List<ForeignKey<StadiumHomeTeamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StadiumHomeTeamsRecord, ?>>asList(Keys.FK_STADIUM_HOME_TEAMS_STADIUM, Keys.FK__TEAM_STADIUM);
    }

    public Stadium stadium() {
        return new Stadium(this, Keys.FK_STADIUM_HOME_TEAMS_STADIUM);
    }

    public Team team() {
        return new Team(this, Keys.FK__TEAM_STADIUM);
    }

    @Override
    public StadiumHomeTeams as(String alias) {
        return new StadiumHomeTeams(DSL.name(alias), this);
    }

    @Override
    public StadiumHomeTeams as(Name alias) {
        return new StadiumHomeTeams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StadiumHomeTeams rename(String name) {
        return new StadiumHomeTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StadiumHomeTeams rename(Name name) {
        return new StadiumHomeTeams(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
