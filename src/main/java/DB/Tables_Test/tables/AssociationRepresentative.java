/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.AssociationRepresentativeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssociationRepresentative extends TableImpl<AssociationRepresentativeRecord> {

    private static final long serialVersionUID = 608991873;

    /**
     * The reference instance of <code>fwdb_test.association_representative</code>
     */
    public static final AssociationRepresentative ASSOCIATION_REPRESENTATIVE = new AssociationRepresentative();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssociationRepresentativeRecord> getRecordType() {
        return AssociationRepresentativeRecord.class;
    }

    /**
     * The column <code>fwdb_test.association_representative.username</code>.
     */
    public final TableField<AssociationRepresentativeRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.association_representative</code> table reference
     */
    public AssociationRepresentative() {
        this(DSL.name("association_representative"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.association_representative</code> table reference
     */
    public AssociationRepresentative(String alias) {
        this(DSL.name(alias), ASSOCIATION_REPRESENTATIVE);
    }

    /**
     * Create an aliased <code>fwdb_test.association_representative</code> table reference
     */
    public AssociationRepresentative(Name alias) {
        this(alias, ASSOCIATION_REPRESENTATIVE);
    }

    private AssociationRepresentative(Name alias, Table<AssociationRepresentativeRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssociationRepresentative(Name alias, Table<AssociationRepresentativeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AssociationRepresentative(Table<O> child, ForeignKey<O, AssociationRepresentativeRecord> key) {
        super(child, key, ASSOCIATION_REPRESENTATIVE);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<AssociationRepresentativeRecord> getPrimaryKey() {
        return Keys.KEY_ASSOCIATION_REPRESENTATIVE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AssociationRepresentativeRecord>> getKeys() {
        return Arrays.<UniqueKey<AssociationRepresentativeRecord>>asList(Keys.KEY_ASSOCIATION_REPRESENTATIVE_PRIMARY);
    }

    @Override
    public List<ForeignKey<AssociationRepresentativeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AssociationRepresentativeRecord, ?>>asList(Keys.FK__USER_ROLES_AR);
    }

    public UserRoles userRoles() {
        return new UserRoles(this, Keys.FK__USER_ROLES_AR);
    }

    @Override
    public AssociationRepresentative as(String alias) {
        return new AssociationRepresentative(DSL.name(alias), this);
    }

    @Override
    public AssociationRepresentative as(Name alias) {
        return new AssociationRepresentative(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssociationRepresentative rename(String name) {
        return new AssociationRepresentative(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssociationRepresentative rename(Name name) {
        return new AssociationRepresentative(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
