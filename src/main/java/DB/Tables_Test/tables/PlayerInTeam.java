/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.enums.PlayerInTeamFieldJob;
import DB.Tables_Test.tables.records.PlayerInTeamRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerInTeam extends TableImpl<PlayerInTeamRecord> {

    private static final long serialVersionUID = 1843356183;

    /**
     * The reference instance of <code>fwdb_test.player_in_team</code>
     */
    public static final PlayerInTeam PLAYER_IN_TEAM = new PlayerInTeam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerInTeamRecord> getRecordType() {
        return PlayerInTeamRecord.class;
    }

    /**
     * The column <code>fwdb_test.player_in_team.username</code>.
     */
    public final TableField<PlayerInTeamRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.player_in_team.team_name</code>.
     */
    public final TableField<PlayerInTeamRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.player_in_team.field_job</code>.
     */
    public final TableField<PlayerInTeamRecord, PlayerInTeamFieldJob> FIELD_JOB = createField(DSL.name("field_job"), org.jooq.impl.SQLDataType.VARCHAR(11).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(DB.Tables_Test.enums.PlayerInTeamFieldJob.class), this, "");

    /**
     * Create a <code>fwdb_test.player_in_team</code> table reference
     */
    public PlayerInTeam() {
        this(DSL.name("player_in_team"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.player_in_team</code> table reference
     */
    public PlayerInTeam(String alias) {
        this(DSL.name(alias), PLAYER_IN_TEAM);
    }

    /**
     * Create an aliased <code>fwdb_test.player_in_team</code> table reference
     */
    public PlayerInTeam(Name alias) {
        this(alias, PLAYER_IN_TEAM);
    }

    private PlayerInTeam(Name alias, Table<PlayerInTeamRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerInTeam(Name alias, Table<PlayerInTeamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PlayerInTeam(Table<O> child, ForeignKey<O, PlayerInTeamRecord> key) {
        super(child, key, PLAYER_IN_TEAM);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<PlayerInTeamRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_IN_TEAM_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerInTeamRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerInTeamRecord>>asList(Keys.KEY_PLAYER_IN_TEAM_PRIMARY);
    }

    @Override
    public List<ForeignKey<PlayerInTeamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PlayerInTeamRecord, ?>>asList(Keys.FK__PLAYER, Keys.FK_PLAYER_IN_TEAM_TEAM);
    }

    public Player player() {
        return new Player(this, Keys.FK__PLAYER);
    }

    public Team team() {
        return new Team(this, Keys.FK_PLAYER_IN_TEAM_TEAM);
    }

    @Override
    public PlayerInTeam as(String alias) {
        return new PlayerInTeam(DSL.name(alias), this);
    }

    @Override
    public PlayerInTeam as(Name alias) {
        return new PlayerInTeam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerInTeam rename(String name) {
        return new PlayerInTeam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerInTeam rename(Name name) {
        return new PlayerInTeam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, PlayerInTeamFieldJob> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
