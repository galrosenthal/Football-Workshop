/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.LeagueRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class League extends TableImpl<LeagueRecord> {

    private static final long serialVersionUID = -649859536;

    /**
     * The reference instance of <code>fwdb_test.league</code>
     */
    public static final League LEAGUE = new League();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeagueRecord> getRecordType() {
        return LeagueRecord.class;
    }

    /**
     * The column <code>fwdb_test.league.name</code>.
     */
    public final TableField<LeagueRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.league</code> table reference
     */
    public League() {
        this(DSL.name("league"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.league</code> table reference
     */
    public League(String alias) {
        this(DSL.name(alias), LEAGUE);
    }

    /**
     * Create an aliased <code>fwdb_test.league</code> table reference
     */
    public League(Name alias) {
        this(alias, LEAGUE);
    }

    private League(Name alias, Table<LeagueRecord> aliased) {
        this(alias, aliased, null);
    }

    private League(Name alias, Table<LeagueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> League(Table<O> child, ForeignKey<O, LeagueRecord> key) {
        super(child, key, LEAGUE);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<LeagueRecord> getPrimaryKey() {
        return Keys.KEY_LEAGUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<LeagueRecord>> getKeys() {
        return Arrays.<UniqueKey<LeagueRecord>>asList(Keys.KEY_LEAGUE_PRIMARY);
    }

    @Override
    public League as(String alias) {
        return new League(DSL.name(alias), this);
    }

    @Override
    public League as(Name alias) {
        return new League(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public League rename(String name) {
        return new League(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public League rename(Name name) {
        return new League(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
