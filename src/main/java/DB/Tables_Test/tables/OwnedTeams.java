/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.OwnedTeamsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OwnedTeams extends TableImpl<OwnedTeamsRecord> {

    private static final long serialVersionUID = -905320565;

    /**
     * The reference instance of <code>fwdb_test.owned_teams</code>
     */
    public static final OwnedTeams OWNED_TEAMS = new OwnedTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnedTeamsRecord> getRecordType() {
        return OwnedTeamsRecord.class;
    }

    /**
     * The column <code>fwdb_test.owned_teams.username</code>.
     */
    public final TableField<OwnedTeamsRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.owned_teams.team_name</code>.
     */
    public final TableField<OwnedTeamsRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.owned_teams.appointer</code>.
     */
    public final TableField<OwnedTeamsRecord, String> APPOINTER = createField(DSL.name("appointer"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>fwdb_test.owned_teams</code> table reference
     */
    public OwnedTeams() {
        this(DSL.name("owned_teams"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.owned_teams</code> table reference
     */
    public OwnedTeams(String alias) {
        this(DSL.name(alias), OWNED_TEAMS);
    }

    /**
     * Create an aliased <code>fwdb_test.owned_teams</code> table reference
     */
    public OwnedTeams(Name alias) {
        this(alias, OWNED_TEAMS);
    }

    private OwnedTeams(Name alias, Table<OwnedTeamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OwnedTeams(Name alias, Table<OwnedTeamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OwnedTeams(Table<O> child, ForeignKey<O, OwnedTeamsRecord> key) {
        super(child, key, OWNED_TEAMS);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<OwnedTeamsRecord> getPrimaryKey() {
        return Keys.KEY_OWNED_TEAMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<OwnedTeamsRecord>> getKeys() {
        return Arrays.<UniqueKey<OwnedTeamsRecord>>asList(Keys.KEY_OWNED_TEAMS_PRIMARY);
    }

    @Override
    public List<ForeignKey<OwnedTeamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OwnedTeamsRecord, ?>>asList(Keys.FK__TEAM_OWNER, Keys.FK__TEAM, Keys.FK_OWNED_TEAMS_SYSTEMUSER);
    }

    public TeamOwner teamOwner() {
        return new TeamOwner(this, Keys.FK__TEAM_OWNER);
    }

    public Team team() {
        return new Team(this, Keys.FK__TEAM);
    }

    public Systemuser systemuser() {
        return new Systemuser(this, Keys.FK_OWNED_TEAMS_SYSTEMUSER);
    }

    @Override
    public OwnedTeams as(String alias) {
        return new OwnedTeams(DSL.name(alias), this);
    }

    @Override
    public OwnedTeams as(Name alias) {
        return new OwnedTeams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnedTeams rename(String name) {
        return new OwnedTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnedTeams rename(Name name) {
        return new OwnedTeams(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
