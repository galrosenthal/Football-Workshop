/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.EventGoalRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventGoal extends TableImpl<EventGoalRecord> {

    private static final long serialVersionUID = -1118651722;

    /**
     * The reference instance of <code>fwdb_test.event_goal</code>
     */
    public static final EventGoal EVENT_GOAL = new EventGoal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventGoalRecord> getRecordType() {
        return EventGoalRecord.class;
    }

    /**
     * The column <code>fwdb_test.event_goal.event_id</code>.
     */
    public final TableField<EventGoalRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fwdb_test.event_goal.game_id</code>.
     */
    public final TableField<EventGoalRecord, Integer> GAME_ID = createField(DSL.name("game_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fwdb_test.event_goal.scored_team</code>.
     */
    public final TableField<EventGoalRecord, String> SCORED_TEAM = createField(DSL.name("scored_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.event_goal.scored_on_team</code>.
     */
    public final TableField<EventGoalRecord, String> SCORED_ON_TEAM = createField(DSL.name("scored_on_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.event_goal.scorer_name</code>.
     */
    public final TableField<EventGoalRecord, String> SCORER_NAME = createField(DSL.name("scorer_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>fwdb_test.event_goal.minute</code>.
     */
    public final TableField<EventGoalRecord, Integer> MINUTE = createField(DSL.name("minute"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.event_goal</code> table reference
     */
    public EventGoal() {
        this(DSL.name("event_goal"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.event_goal</code> table reference
     */
    public EventGoal(String alias) {
        this(DSL.name(alias), EVENT_GOAL);
    }

    /**
     * Create an aliased <code>fwdb_test.event_goal</code> table reference
     */
    public EventGoal(Name alias) {
        this(alias, EVENT_GOAL);
    }

    private EventGoal(Name alias, Table<EventGoalRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventGoal(Name alias, Table<EventGoalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventGoal(Table<O> child, ForeignKey<O, EventGoalRecord> key) {
        super(child, key, EVENT_GOAL);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public Identity<EventGoalRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EVENT_GOAL;
    }

    @Override
    public UniqueKey<EventGoalRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_GOAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventGoalRecord>> getKeys() {
        return Arrays.<UniqueKey<EventGoalRecord>>asList(Keys.KEY_EVENT_GOAL_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventGoalRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventGoalRecord, ?>>asList(Keys.FK_EVENT_GOAL_GAME, Keys.FK_SCORED_TEAM_TEAM, Keys.FK__TEAM_SCORED_ON, Keys.FK_EVENT_GOAL_PLAYER);
    }

    public Game game() {
        return new Game(this, Keys.FK_EVENT_GOAL_GAME);
    }

    public Team fkScoredTeamTeam() {
        return new Team(this, Keys.FK_SCORED_TEAM_TEAM);
    }

    public Team fk_TeamScoredOn() {
        return new Team(this, Keys.FK__TEAM_SCORED_ON);
    }

    public Player player() {
        return new Player(this, Keys.FK_EVENT_GOAL_PLAYER);
    }

    @Override
    public EventGoal as(String alias) {
        return new EventGoal(DSL.name(alias), this);
    }

    @Override
    public EventGoal as(Name alias) {
        return new EventGoal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventGoal rename(String name) {
        return new EventGoal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventGoal rename(Name name) {
        return new EventGoal(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
