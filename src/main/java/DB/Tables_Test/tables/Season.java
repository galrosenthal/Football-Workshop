/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Indexes;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.SeasonRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Season extends TableImpl<SeasonRecord> {

    private static final long serialVersionUID = -1730947427;

    /**
     * The reference instance of <code>fwdb_test.season</code>
     */
    public static final Season SEASON = new Season();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeasonRecord> getRecordType() {
        return SeasonRecord.class;
    }

    /**
     * The column <code>fwdb_test.season.season_id</code>.
     */
    public final TableField<SeasonRecord, Integer> SEASON_ID = createField(DSL.name("season_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>fwdb_test.season.league_name</code>.
     */
    public final TableField<SeasonRecord, String> LEAGUE_NAME = createField(DSL.name("league_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.season.years</code>.
     */
    public final TableField<SeasonRecord, String> YEARS = createField(DSL.name("years"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.season.is_under_way</code>.
     */
    public final TableField<SeasonRecord, Boolean> IS_UNDER_WAY = createField(DSL.name("is_under_way"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>fwdb_test.season.points_policy_id</code>.
     */
    public final TableField<SeasonRecord, Integer> POINTS_POLICY_ID = createField(DSL.name("points_policy_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.season</code> table reference
     */
    public Season() {
        this(DSL.name("season"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.season</code> table reference
     */
    public Season(String alias) {
        this(DSL.name(alias), SEASON);
    }

    /**
     * Create an aliased <code>fwdb_test.season</code> table reference
     */
    public Season(Name alias) {
        this(alias, SEASON);
    }

    private Season(Name alias, Table<SeasonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Season(Name alias, Table<SeasonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Season(Table<O> child, ForeignKey<O, SeasonRecord> key) {
        super(child, key, SEASON);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEASON_LEAGUE_NAME, Indexes.SEASON_YEARS);
    }

    @Override
    public Identity<SeasonRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SEASON;
    }

    @Override
    public UniqueKey<SeasonRecord> getPrimaryKey() {
        return Keys.KEY_SEASON_PRIMARY;
    }

    @Override
    public List<UniqueKey<SeasonRecord>> getKeys() {
        return Arrays.<UniqueKey<SeasonRecord>>asList(Keys.KEY_SEASON_PRIMARY);
    }

    @Override
    public List<ForeignKey<SeasonRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SeasonRecord, ?>>asList(Keys.FK_SEASON_LEAGUE, Keys.FK_SEASON_POINTS_POLICY);
    }

    public League league() {
        return new League(this, Keys.FK_SEASON_LEAGUE);
    }

    public PointsPolicy pointsPolicy() {
        return new PointsPolicy(this, Keys.FK_SEASON_POINTS_POLICY);
    }

    @Override
    public Season as(String alias) {
        return new Season(DSL.name(alias), this);
    }

    @Override
    public Season as(Name alias) {
        return new Season(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Season rename(String name) {
        return new Season(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Season rename(Name name) {
        return new Season(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Boolean, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
