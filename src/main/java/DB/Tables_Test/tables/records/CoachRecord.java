/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables.records;


import DB.Tables_Test.enums.CoachQualification;
import DB.Tables_Test.tables.Coach;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoachRecord extends UpdatableRecordImpl<CoachRecord> implements Record2<String, CoachQualification> {

    private static final long serialVersionUID = 1292584582;

    /**
     * Setter for <code>fwdb_test.coach.username</code>.
     */
    public void setUsername(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>fwdb_test.coach.username</code>.
     */
    public String getUsername() {
        return (String) get(0);
    }

    /**
     * Setter for <code>fwdb_test.coach.qualification</code>.
     */
    public void setQualification(CoachQualification value) {
        set(1, value);
    }

    /**
     * Getter for <code>fwdb_test.coach.qualification</code>.
     */
    public CoachQualification getQualification() {
        return (CoachQualification) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, CoachQualification> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, CoachQualification> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Coach.COACH.USERNAME;
    }

    @Override
    public Field<CoachQualification> field2() {
        return Coach.COACH.QUALIFICATION;
    }

    @Override
    public String component1() {
        return getUsername();
    }

    @Override
    public CoachQualification component2() {
        return getQualification();
    }

    @Override
    public String value1() {
        return getUsername();
    }

    @Override
    public CoachQualification value2() {
        return getQualification();
    }

    @Override
    public CoachRecord value1(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public CoachRecord value2(CoachQualification value) {
        setQualification(value);
        return this;
    }

    @Override
    public CoachRecord values(String value1, CoachQualification value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoachRecord
     */
    public CoachRecord() {
        super(Coach.COACH);
    }

    /**
     * Create a detached, initialised CoachRecord
     */
    public CoachRecord(String username, CoachQualification qualification) {
        super(Coach.COACH);

        set(0, username);
        set(1, qualification);
    }
}
