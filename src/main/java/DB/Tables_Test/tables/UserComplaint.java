/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.UserComplaintRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserComplaint extends TableImpl<UserComplaintRecord> {

    private static final long serialVersionUID = 320540717;

    /**
     * The reference instance of <code>fwdb_test.user_complaint</code>
     */
    public static final UserComplaint USER_COMPLAINT = new UserComplaint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserComplaintRecord> getRecordType() {
        return UserComplaintRecord.class;
    }

    /**
     * The column <code>fwdb_test.user_complaint.complaint_id</code>.
     */
    public final TableField<UserComplaintRecord, Integer> COMPLAINT_ID = createField(DSL.name("complaint_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fwdb_test.user_complaint.username</code>.
     */
    public final TableField<UserComplaintRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.user_complaint.title</code>.
     */
    public final TableField<UserComplaintRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.user_complaint.content</code>.
     */
    public final TableField<UserComplaintRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>fwdb_test.user_complaint.date</code>.
     */
    public final TableField<UserComplaintRecord, LocalDate> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>fwdb_test.user_complaint.active</code>.
     */
    public final TableField<UserComplaintRecord, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>fwdb_test.user_complaint</code> table reference
     */
    public UserComplaint() {
        this(DSL.name("user_complaint"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.user_complaint</code> table reference
     */
    public UserComplaint(String alias) {
        this(DSL.name(alias), USER_COMPLAINT);
    }

    /**
     * Create an aliased <code>fwdb_test.user_complaint</code> table reference
     */
    public UserComplaint(Name alias) {
        this(alias, USER_COMPLAINT);
    }

    private UserComplaint(Name alias, Table<UserComplaintRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserComplaint(Name alias, Table<UserComplaintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserComplaint(Table<O> child, ForeignKey<O, UserComplaintRecord> key) {
        super(child, key, USER_COMPLAINT);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<UserComplaintRecord> getPrimaryKey() {
        return Keys.KEY_USER_COMPLAINT_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserComplaintRecord>> getKeys() {
        return Arrays.<UniqueKey<UserComplaintRecord>>asList(Keys.KEY_USER_COMPLAINT_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserComplaintRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserComplaintRecord, ?>>asList(Keys.FK__SYSTEMUSER);
    }

    public Systemuser systemuser() {
        return new Systemuser(this, Keys.FK__SYSTEMUSER);
    }

    @Override
    public UserComplaint as(String alias) {
        return new UserComplaint(DSL.name(alias), this);
    }

    @Override
    public UserComplaint as(Name alias) {
        return new UserComplaint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserComplaint rename(String name) {
        return new UserComplaint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserComplaint rename(Name name) {
        return new UserComplaint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, LocalDate, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
