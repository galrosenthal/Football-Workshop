/*
 * This file is generated by jOOQ.
 */
package DB.Tables_Test.tables;


import DB.Tables_Test.FwdbTest;
import DB.Tables_Test.Keys;
import DB.Tables_Test.tables.records.StadiumRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stadium extends TableImpl<StadiumRecord> {

    private static final long serialVersionUID = 1553524119;

    /**
     * The reference instance of <code>fwdb_test.stadium</code>
     */
    public static final Stadium STADIUM = new Stadium();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StadiumRecord> getRecordType() {
        return StadiumRecord.class;
    }

    /**
     * The column <code>fwdb_test.stadium.stadium_id</code>.
     */
    public final TableField<StadiumRecord, Integer> STADIUM_ID = createField(DSL.name("stadium_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>fwdb_test.stadium.name</code>.
     */
    public final TableField<StadiumRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>fwdb_test.stadium.location</code>.
     */
    public final TableField<StadiumRecord, String> LOCATION = createField(DSL.name("location"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>fwdb_test.stadium</code> table reference
     */
    public Stadium() {
        this(DSL.name("stadium"), null);
    }

    /**
     * Create an aliased <code>fwdb_test.stadium</code> table reference
     */
    public Stadium(String alias) {
        this(DSL.name(alias), STADIUM);
    }

    /**
     * Create an aliased <code>fwdb_test.stadium</code> table reference
     */
    public Stadium(Name alias) {
        this(alias, STADIUM);
    }

    private Stadium(Name alias, Table<StadiumRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stadium(Name alias, Table<StadiumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Stadium(Table<O> child, ForeignKey<O, StadiumRecord> key) {
        super(child, key, STADIUM);
    }

    @Override
    public Schema getSchema() {
        return FwdbTest.FWDB_TEST;
    }

    @Override
    public UniqueKey<StadiumRecord> getPrimaryKey() {
        return Keys.KEY_STADIUM_PRIMARY;
    }

    @Override
    public List<UniqueKey<StadiumRecord>> getKeys() {
        return Arrays.<UniqueKey<StadiumRecord>>asList(Keys.KEY_STADIUM_PRIMARY);
    }

    @Override
    public Stadium as(String alias) {
        return new Stadium(DSL.name(alias), this);
    }

    @Override
    public Stadium as(Name alias) {
        return new Stadium(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stadium rename(String name) {
        return new Stadium(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stadium rename(Name name) {
        return new Stadium(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
